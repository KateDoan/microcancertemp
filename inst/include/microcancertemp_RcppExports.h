// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_microcancertemp_RCPPEXPORTS_H_GEN_
#define RCPP_microcancertemp_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace microcancertemp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("microcancertemp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("microcancertemp", "_microcancertemp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in microcancertemp");
            }
        }
    }

    inline void create_IMABC_one_node(unsigned N0, unsigned Nc, unsigned Ngoal, unsigned B, NumericVector target_sd_in, NumericVector alpha_start_in, NumericVector alpha_goal_in) {
        typedef SEXP(*Ptr_create_IMABC_one_node)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_create_IMABC_one_node p_create_IMABC_one_node = NULL;
        if (p_create_IMABC_one_node == NULL) {
            validateSignature("void(*create_IMABC_one_node)(unsigned,unsigned,unsigned,unsigned,NumericVector,NumericVector,NumericVector)");
            p_create_IMABC_one_node = (Ptr_create_IMABC_one_node)R_GetCCallable("microcancertemp", "_microcancertemp_create_IMABC_one_node");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_IMABC_one_node(Shield<SEXP>(Rcpp::wrap(N0)), Shield<SEXP>(Rcpp::wrap(Nc)), Shield<SEXP>(Rcpp::wrap(Ngoal)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(target_sd_in)), Shield<SEXP>(Rcpp::wrap(alpha_start_in)), Shield<SEXP>(Rcpp::wrap(alpha_goal_in)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline std::vector<double> check_sim_one_node(NumericVector x) {
        typedef SEXP(*Ptr_check_sim_one_node)(SEXP);
        static Ptr_check_sim_one_node p_check_sim_one_node = NULL;
        if (p_check_sim_one_node == NULL) {
            validateSignature("std::vector<double>(*check_sim_one_node)(NumericVector)");
            p_check_sim_one_node = (Ptr_check_sim_one_node)R_GetCCallable("microcancertemp", "_microcancertemp_check_sim_one_node");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_check_sim_one_node(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

}

#endif // RCPP_microcancertemp_RCPPEXPORTS_H_GEN_
